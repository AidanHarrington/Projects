using System.Collections;
using System.Collections.Generic;
using System.Data;
using UnityEngine;
using UnityEngine.UI;

public class NetworkLayer : MonoBehaviour
{

    private static PhotonView ScriptsPhotonView;
    public static int player1Colour, player2Colour;
    public bool isPlayer1, isPlayer2;

    public bool playTimer;

    // Start is called before the first frame update
    void Start()
    {
        ScriptsPhotonView = GetComponent<PhotonView>();
    }

    private void Update()
    {
        
    }

    /// <summary>
    /// This is going to be called to move player to all connected clients
    /// </summary>
    /// <param name="playerName">player1 or player2</param>
    /// <param name="numberOfSteps">a random number generated by playe1/player2</param>
    /*public static void MoveSteps(string playerName, int numberOfSteps)
    {
        ScriptsPhotonView.RPC("MoveStepsRPC", PhotonTargets.All, playerName, numberOfSteps);
    }

    [PunRPC]
    void MoveStepsRPC(string playerName, int numberOfSteps)
    {
        print("playerName:" + playerName);
        print("numberOfSteps:" + numberOfSteps);
        GameObject.Find(playerName).GetComponent<PlayerController>().Move(numberOfSteps);
    }*/

    public static void Turn(string playerName, int numberOfSteps)
    {
        ScriptsPhotonView.RPC("TurnRPC", PhotonTargets.All, playerName, numberOfSteps);
    }

    [PunRPC]
    void TurnRPC(string playerName, int numberOfSteps)
    {
        if (Dice.play1 && playerName == "Player1" && numberOfSteps <= 5)
        {
            GameObject.Find(playerName).GetComponent<PlayerController>().Move(numberOfSteps);
            print(numberOfSteps);
            
            Dice.play1 = false;
            LevelManager.player1Username.GetComponent<Text>().color = Color.yellow;
            //StartCoroutine(setPause(numberOfSteps));
            Dice.play2 = true;
            LevelManager.player2Username.GetComponent<Text>().color = Color.black;
        }
        else if (Dice.play1 && playerName == "Player1" && numberOfSteps == 6)
        {
            GameObject.Find(playerName).GetComponent<PlayerController>().Move(numberOfSteps);
            
            Dice.play2 = false;
            LevelManager.player1Username.GetComponent<Text>().color = Color.yellow;
            //StartCoroutine(setPause(numberOfSteps));
            Dice.play1 = true;
            LevelManager.player2Username.GetComponent<Text>().color = Color.black;
        }

        if (Dice.play2 && playerName == "Player2" && numberOfSteps <= 5)
        {
            GameObject.Find(playerName).GetComponent<PlayerController>().Move(numberOfSteps);
            
            Dice.play2 = false;
            LevelManager.player1Username.GetComponent<Text>().color = Color.black;
            //StartCoroutine(setPause(numberOfSteps));
            Dice.play1 = true;
            LevelManager.player2Username.GetComponent<Text>().color = Color.yellow;
        }
        else if (Dice.play2 && playerName == "Player2" && numberOfSteps == 6)
        {
            GameObject.Find(playerName).GetComponent<PlayerController>().Move(numberOfSteps);
            
            Dice.play1 = false;
            LevelManager.player1Username.GetComponent<Text>().color = Color.black;
            //StartCoroutine(setPause(numberOfSteps));
            Dice.play2 = true;
            LevelManager.player2Username.GetComponent<Text>().color = Color.yellow;
        }
    }

    IEnumerator setPause(float number)
    {
        yield return new WaitForSeconds(number);
    }

    public static void MoveFinish(string playerName)
    {
        ScriptsPhotonView.RPC("MoveFinishRPC", PhotonTargets.All, playerName);
    }

    [PunRPC]
    void MoveFinishRPC(string playerName)
    {
        GameObject.Find(playerName).GetComponent<PlayerController>().win(playerName);
    }

    public static void chooseColour(string playerName, string colour)
    {
        ScriptsPhotonView.RPC("chooseColourRPC", PhotonTargets.AllBuffered, playerName, colour);
    }

    [PunRPC]
    public void chooseColourRPC(string playerName, string colour)
    {

        if (colour.Equals("Green"))
        {
            MainMenu.green.interactable = false;
            if (playerName == "Player1")
            {
                player1Colour = 1;
                
            }
            else if (playerName == "Player2")
            {
                player2Colour = 1;
                
            }
        }
        else if (colour.Equals("Yellow"))
        {
            MainMenu.yellow.interactable = false;
            if (playerName == "Player1")
            {
                player1Colour = 2;
                
            }
            else if (playerName == "Player2")
            {
                player2Colour = 2;
               
            }
        }
    }

    public static void getUsername(string playerName, string username)
    {
        ScriptsPhotonView.RPC("getUsernameRPC", PhotonTargets.AllBuffered, playerName, username);
    }

    [PunRPC]
    public void getUsernameRPC(string playerName, string username)
    {
        if (playerName == "Player1")
        {
            LevelManager.username = username;
        }
        else if (playerName == "Player2")
        {
            LevelManager.username2 = username;
        }
    }

    public static void WinningStatus(string playerName)
    {
        //send message to all conneted clients that playerName won the game
        ScriptsPhotonView.RPC("WinningStatusRPC", PhotonTargets.All, playerName);
    }

    [PunRPC]
    void WinningStatusRPC(string playerName)
    {
        //change status of text
        GameObject.Find("Scripts").GetComponent<LevelManager>().ChangeStatusText(playerName + " is the winner");
    }


    
    void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
    {

    }
}
